name: Deploy to Production

on:
  push:
    tags: ["v*"]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_API: ${{ github.repository }}/api
  IMAGE_NAME_WEB: ${{ github.repository }}/web

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract tag
        id: extract_tag
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "tag=latest" >> $GITHUB_OUTPUT
          fi

      - name: Create deployment manifest
        run: |
          cat > docker-compose.deploy.yml << EOF
          version: '3.8'

          services:
            api:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:${{ steps.extract_tag.outputs.tag }}
              ports:
                - "3001:3001"
              environment:
                - NODE_ENV=production
                - PORT=3001
                - HOST=0.0.0.0
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
                interval: 30s
                timeout: 10s
                retries: 3

            web:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WEB }}:${{ steps.extract_tag.outputs.tag }}
              ports:
                - "3000:3000"
              environment:
                - NODE_ENV=production
                - NEXT_PUBLIC_API_URL=http://api:3001
                - PORT=3000
                - HOSTNAME=0.0.0.0
              depends_on:
                - api
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:3000"]
                interval: 30s
                timeout: 10s
                retries: 3

          networks:
            default:
              name: crypto-exchange-${{ github.event.inputs.environment || 'production' }}
          EOF

      - name: Upload deployment manifest
        uses: actions/upload-artifact@v4
        with:
          name: deployment-manifest-${{ steps.extract_tag.outputs.tag }}
          path: docker-compose.deploy.yml

      # Example deployment to a server (uncomment and configure as needed)
      # - name: Deploy to server
      #   uses: appleboy/ssh-action@v1.0.0
      #   with:
      #     host: ${{ secrets.DEPLOY_HOST }}
      #     username: ${{ secrets.DEPLOY_USER }}
      #     key: ${{ secrets.DEPLOY_KEY }}
      #     script: |
      #       cd /path/to/deployment
      #       curl -O https://github.com/${{ github.repository }}/releases/download/${{ steps.extract_tag.outputs.tag }}/docker-compose.deploy.yml
      #       docker-compose -f docker-compose.deploy.yml pull
      #       docker-compose -f docker-compose.deploy.yml up -d

      - name: Deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ steps.extract_tag.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **API Image**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:${{ steps.extract_tag.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Web Image**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WEB }}:${{ steps.extract_tag.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Manifest**: Available in artifacts" >> $GITHUB_STEP_SUMMARY
