// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  firstName String?
  lastName  String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders Orders[]
  trades Trade[]

  @@map("users")
}

model CryptoCurrency {
  id       String @id @default(cuid())
  symbol   String @unique // BTC, ETH, etc.
  name     String // Bitcoin, Ethereum, etc.
  decimals Int    @default(8)

  // Relations
  buyOrders  Orders[] @relation("BuyCurrency")
  sellOrders Orders[] @relation("SellCurrency")
  buyTrades  Trade[]  @relation("BuyTradeCurrency")
  sellTrades Trade[]  @relation("SellTradeCurrency")

  @@map("crypto_currencies")
}

model Orders {
  id             String      @id @default(cuid())
  userId         String
  type           OrderType
  side           OrderSide
  buyCurrencyId  String
  sellCurrencyId String
  amount         Decimal     @db.Decimal(20, 8)
  price          Decimal?    @db.Decimal(20, 8) // null for market orders
  status         OrderStatus @default(PENDING)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  executedAt     DateTime?

  // Relations
  user         User           @relation(fields: [userId], references: [id])
  buyCurrency  CryptoCurrency @relation("BuyCurrency", fields: [buyCurrencyId], references: [id])
  sellCurrency CryptoCurrency @relation("SellCurrency", fields: [sellCurrencyId], references: [id])
  trades       Trade[]

  @@map("orders")
}

model Trade {
  id             String   @id @default(cuid())
  buyOrderId     String
  sellOrderId    String
  buyUserId      String
  sellUserId     String
  buyCurrencyId  String
  sellCurrencyId String
  amount         Decimal  @db.Decimal(20, 8)
  price          Decimal  @db.Decimal(20, 8)
  executedAt     DateTime @default(now())

  // Relations
  buyOrder     Orders         @relation(fields: [buyOrderId], references: [id])
  buyUser      User           @relation(fields: [buyUserId], references: [id])
  buyCurrency  CryptoCurrency @relation("BuyTradeCurrency", fields: [buyCurrencyId], references: [id])
  sellCurrency CryptoCurrency @relation("SellTradeCurrency", fields: [sellCurrencyId], references: [id])

  @@map("trades")
}

enum OrderType {
  MARKET
  LIMIT
}

enum OrderSide {
  BUY
  SELL
}

enum OrderStatus {
  PENDING
  PARTIALLY_FILLED
  FILLED
  CANCELLED
  EXPIRED
}
